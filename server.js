 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var mongo = require('mongodb').MongoClient;
var app = express();
var http = require('http');
const https = require('https');
var bl = require('bl');
var url = require('url');
var url_mongo = process.env.MONGOLAB_URI;


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// get search results from Google Custom Search api JSON response
function getResults(url, callback) {
 
      // GSE JSON response handler
      https.get(url, function(response){
        var body = '';
        var i;

        response.on('data', function(chunk){
            body += chunk;
        });
        
        // Prepare response for browser output
        response.on('end', function(){
          var gResponse = JSON.parse(body);
          if(gResponse.hasOwnProperty('items')){ 
            var gReturned = '[';
            for (i in gResponse.items) {
              var item = gResponse.items[i];
              gReturned += '{';
              if(item.hasOwnProperty('link')){
                gReturned += '"url":"'+ item.link + '"';  // link
              }
              if(item.hasOwnProperty('title')){
                gReturned += ',"snippet":"'+ item.title + '"'; // snippet
              }
              if((item.hasOwnProperty('pagemap')) && (item.pagemap.hasOwnProperty('cse_thumbnail'))){
                gReturned += ',"thumbnail":"'+ item.pagemap.cse_thumbnail[0].src + '"'; // thumbnail
              }
              if((item.hasOwnProperty('pagemap')) && (item.pagemap.hasOwnProperty('cse_image'))){
                gReturned += ',"context":"'+ item.pagemap.cse_image[0].src + '"'; // context
              }
              gReturned += '},';
            }
            gReturned = gReturned.slice(0,-1);
            gReturned += ']';
            callback('', gReturned);
          } else {
            callback([{"error":"No results found."}], '');
          }
        });
      }).on('error', function(e){
          callback("Got an error: " + e, '');
      });
  
}


// Insert document in db collection
function insertDocDb(document, col, callback){
  mongo.connect(url_mongo, function(err, client) {
      if (err) throw err;
      var db = client.db(process.env.DBNAME);
      var collection = db.collection(col);
  
      collection.insert(document
      , function(err, data) {
          if (err) callback(err, ''); 
          callback('', data);
          client.close();
      })
  })
}

// Find document in db collection
function findDocDb(query, filter, collection, callback) {
  mongo.connect(url_mongo, function(err, client) {
    if (err) console.log(err);
    var db = client.db(process.env.DBNAME);
    var coll = db.collection(collection);
    
    coll.find(query, filter)
    .toArray(function(err, documents) {
        if (err) callback(err, '');
        callback('', documents);
        client.close();
    })
  })
}

// Get Search parameters - search string, offset, when and url to perform search in GSE
function getSearchParameters(urlStr, callback) {
  
  // Url parameters - search terms
  var parameterUrl = urlStr.substring(17);
  var d = new Date();
  var whenSearch = d.toISOString(); //date and time (when) of the search
  
  var searchStr = parameterUrl;
  var offset = '';
  if (parameterUrl.indexOf('?offset=') >= 0){
    var searchArr = parameterUrl.split('?');  // search parameter
    searchStr = searchArr[0];  // search term string
    var pageArr = searchArr[1].split('=');  // offset parameter
    offset = pageArr[1]; //offset value
  }
  var url = "https://www.googleapis.com/customsearch/v1?key="+process.env.API_KEY+"&cx="+process.env.GCSE_ID+"&q="+searchStr+"&num=10"
  if (offset |= ''){
    url += "&start="+offset;
  }
  if (searchStr != ''){
    callback('', url, whenSearch, searchStr);
  } else {
    callback('Search string empty', '', '', '');
  }
}

// Image search terms parsing and db storing
app.route('/api/imagesearch/*')
    .get(function(req, res) {
  
  // Url String - search terms
  var urlStr = req.url;
  
  // get search parameters
  getSearchParameters(urlStr, function (err, url, whenSearch, searchStr) {
    if (err) res.send(err);
    
    // Insert document with latest search string and when
    var collection = 'latestQueries';
    var document = { term: searchStr, when: whenSearch }
    insertDocDb(document, collection, function (err, data) {
      if (err) throw err;
      if (data.result.ok != 1) {
        res.send("Error: Document not inserted.");
      }
    }); 
    // get search results
    getResults(url, function (err, data) {
      if (err) throw err;
      if (data != '') {
        res.send(data);
      }
    });    
  });
  
    })

// Find latest search terms and when in db and produce list
app.route('/api/latest/imagesearch/')
    .get(function(req, res) {
  
  var query = { };
  var filter = {projection: { term: 1, when: 1, _id: 0 } };
  var collection = 'latestQueries';
  findDocDb(query, filter, collection, function (err, data) {
    if (err) throw err;
    if (data != '') {
      res.end(JSON.stringify(data));
    } else {
      res.end({error:'Not found any search string in the database.'});
    }
  })
  
})

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

