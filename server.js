 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var mongo = require('mongodb').MongoClient;
var app = express();
var http = require('http');
const https = require('https');
var bl = require('bl');
var url = require('url');
var url_mongo = process.env.MONGOLAB_URI;


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

function getResults(query, callback) {
  const url =
  //"https://maps.googleapis.com/maps/api/geocode/json?address=Florence";
  //"https://www.googleapis.com/customsearch/v1?key="+process.env.API_KEY+"&cx="+process.env.GCSE_ID+"&q="+query+"&callback=hndlr"
  "https://www.googleapis.com/customsearch/v1?key="+process.env.API_KEY+"&cx="+process.env.GCSE_ID+"&q="+query
  console.log("url:"+url)

/*http.get(url, res => {
  res.setEncoding("utf8");
  let body = "";
  res.on("data", data => {
    body += data;
  });
  res.on("end", () => {
    body = JSON.parse(body);
    console.log(
      `City: ${body.results[0].formatted_address} -`,
      `Latitude: ${body.results[0].geometry.location.lat} -`,
      `Longitude: ${body.results[0].geometry.location.lng}`
    );
  });
});*/
  
  
   /*https.get(url, function (response) {
     //let body = []; 
     var body = new Buffer(16);
     response.setEncoding('utf8')
      //response.on('data', console.log)
      response.on('data', (chunk) => {
        //body.push(chunk);
        body.write(chunk,0);
        }).on('end', () => {
          body = Buffer.concat(body).toString();
          callback('',body);
          response.end(body);
        });
        response.on('error', console.error)
       callback('error','');
    }).on('error', console.error)*/
   
  
  
  
    https.get(url, res => {
      res.setEncoding("utf8");
      let body = "";
      res.on("data", data => {
        body += data;
      });
      res.on("end", () => {
        body = JSON.parse(body);
        callback('', body);
        /*console.log(
          `City: ${body.results[0].formatted_address} -`,
          `Latitude: ${body.results[0].geometry.location.lat} -`,
          `Longitude: ${body.results[0].geometry.location.lng}`
        );*/
      });
    });  
  
  
}

/*
function hndlr(response) {
      for (var i = 0; i < response.items.length; i++) {
        var item = response.items[i];
        // in production code, item.htmlTitle should have the HTML entities escaped.
        document.getElementById("content").innerHTML += "<br>" + item.htmlTitle;
      }
    }*/

// Insert document in db collection
function insertDocDb(document, col, callback){
  mongo.connect(url_mongo, function(err, client) {
      if (err) throw err;
      var db = client.db(process.env.DBNAME);
      var collection = db.collection(col);
  
      collection.insert(document
      , function(err, data) {
          if (err) callback(err, ''); 
          callback('', data);
          client.close();
      })
  })
}

// Find document in db collection
function findDocDb(query, filter, collection, callback) {
  mongo.connect(url_mongo, function(err, client) {
    if (err) console.log(err);
    var db = client.db(process.env.DBNAME);
    var coll = db.collection(collection);
    
    coll.find(query, filter)
    //coll.find(query)
    .toArray(function(err, documents) {
        if (err) callback(err, '');
        callback('', documents);
        client.close();
    })
  })
}

app.route('/api/imagesearch/*')
    .get(function(req, res) {
  
  // Url parameters - search terms
  var urlStr = req.url;
  var parameterUrl = urlStr.substring(17);
  var d = new Date();
  var n = d.toISOString();
  
  // Insert document with original and short url in db
  var collection = 'latestQueries';
  var document = { term: parameterUrl, when: n }
  insertDocDb(document, collection, function (err, data) {
    if (err) throw err;
    if (data.result.ok == 1) {
      //var urlOjb = {term: data.ops[0].term, when: data.ops[0].when};
      //res.send(JSON.stringify(urlOjb));
      console.log("inserted");
    }
  }); 
  
  // Find short url parameter in db and redirect to original url, if not print error message
  /*var query = { term: parameterUrl };
  findDocDb(query, collection, function (err, data) {
    if (err) throw err;
    if (data != '') {
      //console.log(data)
      console.log(JSON.stringify(data));
      console.log(data[0].term);
      console.log(data[0].when);
      //res.redirect(data[0].originalUrl);
    } else {
      console.log(JSON.stringify({error:'This url is not found in the database.'}));
      //res.send(JSON.stringify({error:'This url is not found in the database.'}));
    }
  })*/
  
  //var queryStr = urlStr.split('?');
  
  //var queryData = url.parse(req.url, true).query;
  //res.end('Hello ' + queryData.name + '\n');
  
  //res.end('Hello ' + parameterUrl + '\n');
  
  //const myURL = new URL(req.url);
  //console.log(myURL.searchParams.get('abc'));
  
  /*getResuts(parameterUrl, function (err, data) {
  //if (err) throw err;
    if (data != '') {
      res.send(JSON.stringify(data));
    }
  })*/
  
  //const url = "https://www.googleapis.com/customsearch/v1?key="+process.env.API_KEY+"&cx="+process.env.GCSE_ID+"&q="+parameterUrl
  const url = "https://www.googleapis.com/customsearch/v1?key="+process.env.API_KEY+"&cx="+process.env.GCSE_ID+"&q="+parameterUrl+"&num=10"
  console.log("url:"+url)
  
  
  
  
    /*https.get(url, response => {
      response.setEncoding("utf8");
      let body = "";
      response.on("data", data => {
        body += data;
      });
      response.on("end", () => {
        body = JSON.parse(body);
        res.send('olwere');
        res.send(JSON.stringify(body));
        //res.send(JSON.stringify(body));
        //callback('', body);
        /*console.log(
          `City: ${body.results[0].formatted_address} -`,
          `Latitude: ${body.results[0].geometry.location.lat} -`,
          `Longitude: ${body.results[0].geometry.location.lng}`
        );*/
      /*});
    });*/
  
  
    /*https.get(url, function (response) {
        response.pipe(bl(function (err, data) {
          if (err) {
            return console.error(err)
          }
          data = data.toString()
          //res.send(JSON.stringify(response));
          //console.log(data)
          console.log(JSON.stringify(data));
        }))
      })*/
  
      //res.send(JSON.stringify({ipaddress: ipAddress, language: language, software: software}));
      
      // Search execution and json results
      
      
      https.get(url, function(res){
        var body = '';
        var count;

        res.on('data', function(chunk){
            body += chunk;
        });

        res.on('end', function(){
            var GResponse = JSON.parse(body);
          var GReturned = '[';
          for (count=0; count < 10; count++) {
          //for (i in GResponse.items) {
            GReturned += '{';
            if(GResponse.items[count].hasOwnProperty('link')){
              GReturned += '"url":"'+ GResponse.items[count].link + '"'; 
            }
            if(GResponse.items[count].hasOwnProperty('snippet')){
              GReturned += ',"snippet":"'+ GResponse.items[count].snippet + '"'; 
            }
            if(GResponse.items[count].pagemap.hasOwnProperty('cse_thumbnail')){
              GReturned += ',"thumbnail":"'+ GResponse.items[count].pagemap.cse_thumbnail[0].src + '"'; // thumbnail
            }
            if(GResponse.items[count].pagemap.hasOwnProperty('cse_image')){
              GReturned += ',"context":"'+ GResponse.items[count].pagemap.cse_image[0].src + '"'; // Context
            }
            GReturned += '},';
          }
          GReturned = GReturned.slice(0,-1);
          GReturned += ']';
          console.log(GReturned);
          //console.log(JSON.stringify(GReturned));
        });
      }).on('error', function(e){
          console.log("Got an error: ", e);
      });
        
      // 
    res.send(JSON.stringify("oliiiiiiiii"));
		  //res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/api/latest/imagesearch/')
    .get(function(req, res) {
  
  // Find short url parameter in db and redirect to original url, if not print error message
  var query = { };
  var filter = {projection: { term: 1, when: 1, _id: 0 } };
  var collection = 'latestQueries';
  findDocDb(query, filter, collection, function (err, data) {
    if (err) throw err;
    if (data != '') {
      //console.log(data)
      console.log(JSON.stringify(data));
      //res.redirect(data[0].originalUrl);
    } else {
      console.log(JSON.stringify({error:'This url is not found in the database.'}));
      //res.send(JSON.stringify({error:'This url is not found in the database.'}));
    }
  })
  res.send(JSON.stringify("latest"));
  
})

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

